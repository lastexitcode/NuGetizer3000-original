<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">

  <Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets" 
    Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).Before.targets')"/>

  <UsingTask TaskName="NuGet.Packaging.Tasks.AssignTargetFramework" AssemblyFile="$(NuGetTasksPath)" />
  <UsingTask TaskName="NuGet.Packaging.Tasks.GenerateNuSpec" AssemblyFile="$(NuGetTasksPath)" />
  <UsingTask TaskName="NuGet.Packaging.Tasks.ReadPackagesConfig" AssemblyFile="$(NuGetTasksPath)" />
  <UsingTask TaskName="NuGet.Packaging.Tasks.ReadProjectJson" AssemblyFile="$(NuGetTasksPath)" />
  <UsingTask TaskName="NuGet.Packaging.Tasks.NuGetPack" AssemblyFile="$(NuGetTasksPath)" />

  <PropertyGroup>
    <IsNuGetMetadataAvailable Condition=" '$(NuGetId)' != '' ">True</IsNuGetMetadataAvailable>
    <NuGetVersion Condition=" '$(NuGetVersion)' == '' ">1.0.0</NuGetVersion>
    <NuGetInfoPath Condition=" '$(NuGetId)' != '' ">$(IntermediateOutputPath)_$(NuGetId).nuspec</NuGetInfoPath>
    <NuGetInfoPath Condition=" '$(NuGetId)' == '' ">$(IntermediateOutputPath)_package.nuspec</NuGetInfoPath>
    <NuSpecPath>$(NuGetInfoPath)</NuSpecPath>
    <NuGetInfoPath>$([System.IO.Path]::GetFullPath($(NuGetInfoPath)))</NuGetInfoPath>
    <NuGetOutputPath Condition=" '$(NuGetOutputPath)' == '' ">$(OutDir)$(NuGetId).$(NuGetVersion).nupkg</NuGetOutputPath>
  </PropertyGroup>

   <PropertyGroup Condition=" '$(BuildNuGet)' == 'True' AND '$(IsNuGetMetadataAvailable)' == 'True' ">
    <BuildDependsOn>$(BuildDependsOn);BuildNuGet</BuildDependsOn>
  </PropertyGroup>

  <PropertyGroup Condition="'$(BuildNuGet)' == 'True' AND '$(IsNuGetMetadataAvailable)' == 'True'">
    <PrepareResourcesDependsOn>
      _CollectOutputFiles;
      $(PrepareResourcesDependsOn)
    </PrepareResourcesDependsOn>
  </PropertyGroup>

  <Target
    Name="_CollectOutputFiles">
    <ItemGroup>
      <FileWrites Include="$(NuGetInfoPath)" />
      <FileWrites Include="$(NuGetOutputPath)" />
    </ItemGroup>
  </Target>

  <Target
    Name="GetNuGetInfo"
    Outputs="$(NuGetInfoPath)"
    DependsOnTargets="_GenerateNuSpec">
  </Target>

  <Target
    Name="_GetProjectReferenceNuGetInfo"
    DependsOnTargets="ResolveProjectReferences"
    Returns="@(_ProjectReferenceNuGetInfo)">
    <MSBuild
      Projects="@(ProjectReference)"
      Targets="GetNuGetInfo"
      Condition="('$(BuildingSolutionFile)'=='true' or '$(BuildingInsideVisualStudio)'=='true')">
      <Output TaskParameter="TargetOutputs" ItemName="_ProjectReferenceNuGetInfo"/>
    </MSBuild>
  </Target>

  <Target
    Name="_GenerateNuSpec"
    Inputs="@(NuGetFile);AlwaysRunEvenIfPackageFileIsEmpty"
    Outputs="$(NuSpecPath)"
    DependsOnTargets="_GetNuGetDependencies;_GetNuGetFiles;_GetProjectReferenceNuGetInfo">
    <!-- Please Note:
         In order to avoid incremental build issues this target will always run.
         However, the task will make sure that it doesn't touch the file if the
         contents it would generate are identical to a previously generated
         nuspec. -->
    <GenerateNuSpec
      OutputFileName="$(NuSpecPath)"
      MinClientVersion="$(MinClientVersion)"
      Id="$(NuGetId)"
      Version="$(NuGetVersion)"
      Title="$(NuGetTitle)"
      Authors="$(NuGetAuthors)"
      Owners="$(NuGetOwners)"
      Description="$(NuGetDescription)"
      ReleaseNotes="$(NuGetReleaseNotes)"
      Summary="$(NuGetSummary)"
      Language="$(NuGetLanguage)"
      ProjectUrl="$(NuGetProjectUrl)"
      IconUrl="$(NuGetIconUrl)"
      LicenseUrl="$(NuGetLicenseUrl)"
      Copyright="$(NuGetCopyright)"
      RequireLicenseAcceptance="$(NuGetRequireLicenseAcceptance)"
      Tags="$(NuGetTags)"
      DevelopmentDependency="$(NuGetDevelopmentDependency)"
      Dependencies="@(NuGetDependency)"
      References="@(NuGetAssemblyReference)"
      FrameworkReferences="@(NuGetFrameworkReference)"
      Files="@(NuGetFile)"
      NuSpecFileDependencies="@(_ProjectReferenceNuGetInfo)" />
  </Target>

  <Target
    Name="BuildNuGet"
    Inputs="$(MSBuildAllProjects);$(NuSpecPath)"
    Outputs="$(NuGetOutputPath)"
    DependsOnTargets="GetNuGetInfo">

    <MakeDir
      Directories="$(OutDir)"
      Condition="!Exists('$(OutDir)')" />

    <NuGetPack
      OutputDirectory="$(OutDir)"
      NoPackageAnalysis="$(NoPackageAnalysis)"
      Symbols="$(GenerateSymbolPackage)"
      ToolPath="$(NuGetToolPath)"
      ToolExe="$(NuGetToolExe)"
      NuSpecPath="$(NuSpecPath)">
    </NuGetPack>
  </Target>

  <Target
    Name="_GetNuGetFiles"
    DependsOnTargets="_GetNuGetDependencies"
    Returns="@(NuGetFile)">
    <ItemGroup>
      <_NuGetLibFile Include="$(TargetPath)" />
      <_NuGetLibFile Include="@(DocFileItem)" Condition="Exists('%(DocFileItem.FullPath)')" />
    </ItemGroup>

    <ItemGroup>
      <_NuGetLibFile
        Include="%(ReferencePath.FullPath)"
        Condition=" '%(ReferencePath.FrameworkFile)' != 'true'
          AND '%(ReferencePath.CopyLocal)' != 'false'
          AND Exists('%(ReferencePath.FullPath)')" />
    </ItemGroup>

    <!-- Remove files that were local copied from NuGet packages -->
    <ItemGroup>
      <_NuGetFileDependency
        Include="%(NuGetDependency.PackageDirectoryPath)\**\*"
        Condition="'%(NuGetDependency.PackageDirectoryPath)' != ''" />

      <_NuGetLibFile Remove="@(_NuGetFileDependency)" />
    </ItemGroup>

    <CreateItem
      Include="@(_NuGetLibFile)"
      AdditionalMetadata="TargetFrameworkMoniker=$(TargetFrameworkMoniker)">
      <Output
        TaskParameter="Include"
        ItemName="_NuGetLibFileWithTargetFramework" />
    </CreateItem>

    <AssignTargetFramework OutputsWithTargetFrameworkInformation="@(_NuGetLibFileWithTargetFramework)">
      <Output
        TaskParameter="PackageFiles"
        ItemName="NuGetFile" />
    </AssignTargetFramework>
  </Target>

  <Target
    Name="_GetNuGetDependencies"
    Returns="@(NuGetDependency)">
    <ReadPackagesConfig Projects="$(MSBuildProjectFullPath)">
      <Output
        TaskParameter="PackageReferences"
        ItemName="_NuGetPackageReference" />
    </ReadPackagesConfig>

    <ReadProjectJson Projects="$(MSBuildProjectFullPath)" TargetFrameworkMoniker="$(TargetFrameworkMoniker)">
      <Output
        TaskParameter="PackageReferences"
        ItemName="_NuGetPackageReference" />
    </ReadProjectJson>

    <ItemGroup Condition="'@(_NuGetPackageReference)' != ''">
      <NuGetDependency
        Include="@(_NuGetPackageReference)"
        Condition="'%(IsDevelopmentDependency)' != 'True'"
        RemoveMetadata="IsDevelopmentDependency;RequireReinstallation">
      </NuGetDependency>
    </ItemGroup>
  </Target>

  <Import Project="$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets"
    Condition="Exists('$(MSBuildThisFileDirectory)$(MSBuildThisFileName).After.targets')"/>
</Project>
